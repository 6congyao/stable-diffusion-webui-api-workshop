AWSTemplateFormatVersion: 2010-09-09
Description: Template for Lambda and API gateway

Parameters:
  S3Bucket:
    Description: S3 Bucket of assets
    Type: String

  S3Key:
    Description: S3 Bucket of assets
    Type: String

  ChinaRegion: 
    Description: Check if the stack to be in CN Region
    Type: String
    Default: false
    AllowedValues: [ true, false ]

Conditions:
  Globally: !Equals [ false, !Ref ChinaRegion ]

Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Parameters:
        endpointConfigurationTypes: REGIONAL
      BinaryMediaTypes:
        - 'image/png'
        - 'image/jpg'
        - 'image/jpeg'
      Name: all-in-one-ai-api 
      Policy: 
        !If
          - Globally
          - !Sub 
            - |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": "execute-api:Invoke",
                        "Resource": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*",
                        "Condition": {
                            "IpAddress": {
                                "aws:SourceIp": [
                                    "${Eip1}/0"
                                ]
                            }
                        }
                    }
                ]
              }
            - Eip1 : '0.0.0.0'
          - !Sub 
            - |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": "execute-api:Invoke",
                        "Resource": "arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*",
                        "Condition": {
                            "IpAddress": {
                                "aws:SourceIp": [
                                    "${Eip1}/0"
                                ]
                            }
                        }
                    }
                ]
              }
            - Eip1 : '0.0.0.0'

  ApiGatewayResourceInference:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'inference'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodInferencePost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIInferenceFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIInferenceFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceInference
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIInferenceFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
  
  AllInOneAIInferenceFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_inference
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIInferenceFunctionRole

  AllInOneAIInferenceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_inference.zip
      FunctionName: all_in_one_ai_inference
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIInferenceFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9

  AllInOneAIInferenceFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIInferenceFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/inference
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/inference
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceTrainingJob:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'trainingjob'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodTrainingJobPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITrainingJobFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITrainingJobFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceTrainingJob
      RestApiId: !Ref ApiGatewayRestApi

  AllInOneAITrainingJobFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAITrainingJobFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:  all_in_one_ai_training_job
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAITrainingJobFunctionRole

  AllInOneAITrainingJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_training_job.zip
      FunctionName: all_in_one_ai_training_job
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAITrainingJobFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9

  AllInOneAITrainingJobFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAITrainingJobFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/trainingjob
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/trainingjob
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayRestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: 
      - ApiGatewayMethodInferencePost
      - ApiGatewayMethodTrainingJobPost
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Description: 'All-In-One-AI API Gateway'
      StageName: Prod

Outputs:
  ApiGatewayProdEndpoint:
    Description: "API Prod stage endpoint"
    Value: 
      !If
      - Globally
      - !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
      - !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com.cn/Prod'